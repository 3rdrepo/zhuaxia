#!/usr/bin/env python
# -*- coding:utf-8 -*-
import zhuaxia.config as config

#load config at very beginning
config.load_config()

import sys,getopt
import zhuaxia.util as util
import logging
import zhuaxia.log as log
import zhuaxia.threadpool as threadpool
import zhuaxia.xiami as xm
import zhuaxia.downloader as downloader
import zhuaxia.commander as commander
import zhuaxia.zxver as zxver
import zhuaxia.option as user_option
import zhuaxia.hist_handler as hist_handler

# logger name
logger_name = 'zxLogger'

#after init config, loading message
if config.LANG.upper() == 'CN':
    import zhuaxia.i18n.msg_cn as msg
else:
    import zhuaxia.i18n.msg_en as msg

help_info = msg.help_info

def usage():
    """print usage information"""
    print help_info % log.STYLE

def version():
    """print version"""
    print msg.ver_text + zxver.version

if __name__ == '__main__':
    log.setup_log(logger_name, config.LOG_LVL_CONSOLE, config.LOG_LVL_FILE)
    LOG = log.get_logger(logger_name)
    
    try:
        hq             = False
        inFile         = ''
        inUrl          = ''
        needProxyPool  = False
        dl_lyric       = False
        incremental_dl = False

        if len(sys.argv)<2: raise getopt.GetoptError("parameters are missing...")

        opts, args = getopt.getopt(sys.argv[1:],":f:Hhvplie")
        for o, a in opts:
            if o == '-h':
                usage()
                sys.exit(0)
            elif o == '-H':
                hq = True
            elif o == '-v':
                version()
                sys.exit(0)
            elif o == '-f':
                inFile = a
            elif o == '-p':
                LOG.warning(msg.experimental)
                needProxyPool = True
            elif o == '-l':
                dl_lyric = True
            elif o == '-i':
                incremental_dl = True
            elif o == '-e': #export history data
                hist_handler.export_hists()
                sys.exit(0)
                

        if not inFile:
            if not len(args):
                raise getopt.GetoptError("input file or xiami url is needed")
            else:
                inUrl = args[0]

        #build the user option
        option = user_option.Option()
        option.is_hq = hq
        option.need_proxy_pool = needProxyPool
        option.dl_lyric = dl_lyric
        option.inFile = inFile
        option.inUrl = inUrl
        option.incremental_dl = incremental_dl

        #print debug
        option.debug_me()

        commander.shall_I_begin(option)
                
    except getopt.GetoptError as e:
        LOG.error(str(e))
        usage()
        sys.exit(2)
